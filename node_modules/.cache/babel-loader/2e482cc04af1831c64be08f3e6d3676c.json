{"ast":null,"code":"import _toConsumableArray from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mimdieke/GHRepos/ToDo/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mimdieke/GHRepos/ToDo/src/containers/ListMaker/ListMaker.js\";\nimport React, { PureComponent } from \"react\";\nimport ListHeader from \"../../components/ListHeader\";\nimport ToDoList from \"../../components/ToDoList\";\nimport { StyledAppWrap } from \"../../components/UI/styled-components\";\n\nvar ListMaker =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ListMaker, _PureComponent);\n\n  function ListMaker(props) {\n    var _this;\n\n    _classCallCheck(this, ListMaker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListMaker).call(this, props));\n    _this.state = {\n      list: [{\n        listItemValue: \"something I don't want to do\",\n        listItemId: \"something I don't want to do\",\n        listItemChecked: false\n      }, {\n        listItemValue: \"something my wife wants me to do\",\n        listItemId: \"something my wife wants me to do\",\n        listItemChecked: false\n      }, {\n        listItemValue: \"something that falls into both of the first two categories\",\n        listItemId: \"something that falls into both of the first two categories\",\n        listItemChecked: false\n      }],\n      newListItem: \"\"\n    };\n    _this.updateListItem = _this.updateListItem.bind(_assertThisInitialized(_this));\n    _this.updateNewListItem = _this.updateNewListItem.bind(_assertThisInitialized(_this));\n    _this.checkListItem = _this.checkListItem.bind(_assertThisInitialized(_this));\n    _this.removeListItem = _this.removeListItem.bind(_assertThisInitialized(_this));\n    _this.addListItem = _this.addListItem.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ListMaker, [{\n    key: \"addListItem\",\n    value: function addListItem() {\n      var newListState = _toConsumableArray(this.state.list);\n\n      var itemToAdd = this.state.newListItem;\n      var itemExists = this.state.list.find(function (item) {\n        return item.listItemValue === itemToAdd;\n      });\n\n      if (itemExists || itemToAdd.length === 0) {\n        return;\n      }\n\n      newListState = newListState.concat({\n        listItemValue: itemToAdd,\n        listItemId: itemToAdd,\n        listItemChecked: false\n      });\n      this.setState({\n        list: newListState\n      });\n    }\n  }, {\n    key: \"removeListItem\",\n    value: function removeListItem(e) {\n      var targetValue = e.target.id;\n\n      var newListState = _toConsumableArray(this.state.list);\n\n      newListState = newListState.filter(function (item) {\n        return item.listItemId !== targetValue;\n      });\n      this.setState({\n        list: newListState\n      });\n    }\n  }, {\n    key: \"updateListItem\",\n    value: function updateListItem(e) {\n      var newValue = e.target.value;\n      var targetValue = e.target.id;\n\n      var newListState = _toConsumableArray(this.state.list);\n\n      newListState.find(function (item) {\n        return item.listItemId === targetValue;\n      }).listItemValue = newValue;\n      this.setState({\n        list: newListState\n      });\n    }\n  }, {\n    key: \"updateNewListItem\",\n    value: function updateNewListItem(e) {\n      var newValue = e.target.value;\n      this.setState({\n        newListItem: newValue\n      });\n    }\n  }, {\n    key: \"checkListItem\",\n    value: function checkListItem(e) {\n      var targetValue = e.target.id;\n\n      var newListState = _toConsumableArray(this.state.list);\n\n      var thisListItem = newListState.find(function (item) {\n        return item.listItemId === targetValue;\n      });\n      thisListItem.listItemChecked = !thisListItem.listItemChecked;\n      this.setState({\n        list: newListState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var list = this.state.list;\n      return React.createElement(StyledAppWrap, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(ListHeader, {\n        updateNewListItem: this.updateNewListItem,\n        addListItem: this.addListItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(ToDoList, {\n        removeListItem: this.removeListItem,\n        updateListItem: this.updateListItem,\n        checkListItem: this.checkListItem,\n        list: list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ListMaker;\n}(PureComponent);\n\nexport default ListMaker;","map":{"version":3,"sources":["/Users/mimdieke/GHRepos/ToDo/src/containers/ListMaker/ListMaker.js"],"names":["React","PureComponent","ListHeader","ToDoList","StyledAppWrap","ListMaker","props","state","list","listItemValue","listItemId","listItemChecked","newListItem","updateListItem","bind","updateNewListItem","checkListItem","removeListItem","addListItem","newListState","itemToAdd","itemExists","find","item","length","concat","setState","e","targetValue","target","id","filter","newValue","value","thisListItem"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,SAASC,aAAT,QAA8B,uCAA9B;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,aAAa,EAAE,8BADjB;AAEEC,QAAAA,UAAU,EAAE,8BAFd;AAGEC,QAAAA,eAAe,EAAE;AAHnB,OADI,EAMJ;AACEF,QAAAA,aAAa,EAAE,kCADjB;AAEEC,QAAAA,UAAU,EAAE,kCAFd;AAGEC,QAAAA,eAAe,EAAE;AAHnB,OANI,EAWJ;AACEF,QAAAA,aAAa,EACX,4DAFJ;AAGEC,QAAAA,UAAU,EACR,4DAJJ;AAKEC,QAAAA,eAAe,EAAE;AALnB,OAXI,CADK;AAoBXC,MAAAA,WAAW,EAAE;AApBF,KAAb;AAuBA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,+BAAtB;AACA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,+BAAzB;AACA,UAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,+BAArB;AACA,UAAKG,cAAL,GAAsB,MAAKA,cAAL,CAAoBH,IAApB,+BAAtB;AACA,UAAKI,WAAL,GAAmB,MAAKA,WAAL,CAAiBJ,IAAjB,+BAAnB;AA7BiB;AA8BlB;;;;kCAEa;AACZ,UAAIK,YAAY,sBAAO,KAAKZ,KAAL,CAAWC,IAAlB,CAAhB;;AACA,UAAMY,SAAS,GAAG,KAAKb,KAAL,CAAWK,WAA7B;AACA,UAAMS,UAAU,GAAG,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,IAAhB,CACjB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACd,aAAL,KAAuBW,SAA3B;AAAA,OADa,CAAnB;;AAIA,UAAIC,UAAU,IAAID,SAAS,CAACI,MAAV,KAAqB,CAAvC,EAA0C;AACxC;AACD;;AAEDL,MAAAA,YAAY,GAAGA,YAAY,CAACM,MAAb,CAAoB;AACjChB,QAAAA,aAAa,EAAEW,SADkB;AAEjCV,QAAAA,UAAU,EAAEU,SAFqB;AAGjCT,QAAAA,eAAe,EAAE;AAHgB,OAApB,CAAf;AAMA,WAAKe,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEW;AADM,OAAd;AAGD;;;mCAEcQ,C,EAAG;AAChB,UAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,EAA7B;;AACA,UAAIX,YAAY,sBAAO,KAAKZ,KAAL,CAAWC,IAAlB,CAAhB;;AACAW,MAAAA,YAAY,GAAGA,YAAY,CAACY,MAAb,CAAoB,UAAAR,IAAI;AAAA,eAAIA,IAAI,CAACb,UAAL,KAAoBkB,WAAxB;AAAA,OAAxB,CAAf;AACA,WAAKF,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEW;AADM,OAAd;AAGD;;;mCAEcQ,C,EAAG;AAChB,UAAMK,QAAQ,GAAGL,CAAC,CAACE,MAAF,CAASI,KAA1B;AACA,UAAML,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,EAA7B;;AACA,UAAMX,YAAY,sBAAO,KAAKZ,KAAL,CAAWC,IAAlB,CAAlB;;AACAW,MAAAA,YAAY,CAACG,IAAb,CACE,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACb,UAAL,KAAoBkB,WAAxB;AAAA,OADN,EAEEnB,aAFF,GAEkBuB,QAFlB;AAGA,WAAKN,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEW;AADM,OAAd;AAGD;;;sCAEiBQ,C,EAAG;AACnB,UAAMK,QAAQ,GAAGL,CAAC,CAACE,MAAF,CAASI,KAA1B;AACA,WAAKP,QAAL,CAAc;AACZd,QAAAA,WAAW,EAAEoB;AADD,OAAd;AAGD;;;kCAEaL,C,EAAG;AACf,UAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,EAA7B;;AACA,UAAMX,YAAY,sBAAO,KAAKZ,KAAL,CAAWC,IAAlB,CAAlB;;AACA,UAAM0B,YAAY,GAAGf,YAAY,CAACG,IAAb,CACnB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACb,UAAL,KAAoBkB,WAAxB;AAAA,OADe,CAArB;AAGAM,MAAAA,YAAY,CAACvB,eAAb,GAA+B,CAACuB,YAAY,CAACvB,eAA7C;AAEA,WAAKe,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEW;AADM,OAAd;AAGD;;;6BAEQ;AAAA,UACCX,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAEP,aACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,iBAAiB,EAAE,KAAKO,iBAD1B;AAEE,QAAA,WAAW,EAAE,KAAKG,WAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,QAAD;AACE,QAAA,cAAc,EAAE,KAAKD,cADvB;AAEE,QAAA,cAAc,EAAE,KAAKJ,cAFvB;AAGE,QAAA,aAAa,EAAE,KAAKG,aAHtB;AAIE,QAAA,IAAI,EAAER,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AAcD;;;;EAhHqBP,a;;AAmHxB,eAAeI,SAAf","sourcesContent":["import React, { PureComponent } from \"react\";\n\nimport ListHeader from \"../../components/ListHeader\";\nimport ToDoList from \"../../components/ToDoList\";\n\nimport { StyledAppWrap } from \"../../components/UI/styled-components\";\n\nclass ListMaker extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n        {\n          listItemValue: \"something I don't want to do\",\n          listItemId: \"something I don't want to do\",\n          listItemChecked: false\n        },\n        {\n          listItemValue: \"something my wife wants me to do\",\n          listItemId: \"something my wife wants me to do\",\n          listItemChecked: false\n        },\n        {\n          listItemValue:\n            \"something that falls into both of the first two categories\",\n          listItemId:\n            \"something that falls into both of the first two categories\",\n          listItemChecked: false\n        }\n      ],\n      newListItem: \"\"\n    };\n\n    this.updateListItem = this.updateListItem.bind(this);\n    this.updateNewListItem = this.updateNewListItem.bind(this);\n    this.checkListItem = this.checkListItem.bind(this);\n    this.removeListItem = this.removeListItem.bind(this);\n    this.addListItem = this.addListItem.bind(this);\n  }\n\n  addListItem() {\n    let newListState = [...this.state.list];\n    const itemToAdd = this.state.newListItem;\n    const itemExists = this.state.list.find(\n      item => item.listItemValue === itemToAdd\n    );\n\n    if (itemExists || itemToAdd.length === 0) {\n      return;\n    }\n\n    newListState = newListState.concat({\n      listItemValue: itemToAdd,\n      listItemId: itemToAdd,\n      listItemChecked: false\n    });\n\n    this.setState({\n      list: newListState\n    });\n  }\n\n  removeListItem(e) {\n    const targetValue = e.target.id;\n    let newListState = [...this.state.list];\n    newListState = newListState.filter(item => item.listItemId !== targetValue);\n    this.setState({\n      list: newListState\n    });\n  }\n\n  updateListItem(e) {\n    const newValue = e.target.value;\n    const targetValue = e.target.id;\n    const newListState = [...this.state.list];\n    newListState.find(\n      item => item.listItemId === targetValue\n    ).listItemValue = newValue;\n    this.setState({\n      list: newListState\n    });\n  }\n\n  updateNewListItem(e) {\n    const newValue = e.target.value;\n    this.setState({\n      newListItem: newValue\n    });\n  }\n\n  checkListItem(e) {\n    const targetValue = e.target.id;\n    const newListState = [...this.state.list];\n    const thisListItem = newListState.find(\n      item => item.listItemId === targetValue\n    );\n    thisListItem.listItemChecked = !thisListItem.listItemChecked;\n\n    this.setState({\n      list: newListState\n    });\n  }\n\n  render() {\n    const { list } = this.state;\n    return (\n      <StyledAppWrap>\n        <ListHeader\n          updateNewListItem={this.updateNewListItem}\n          addListItem={this.addListItem}\n        />\n        <ToDoList\n          removeListItem={this.removeListItem}\n          updateListItem={this.updateListItem}\n          checkListItem={this.checkListItem}\n          list={list}\n        />\n      </StyledAppWrap>\n    );\n  }\n}\n\nexport default ListMaker;\n"]},"metadata":{},"sourceType":"module"}